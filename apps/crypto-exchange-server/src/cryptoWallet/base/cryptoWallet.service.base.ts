/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CryptoWallet as PrismaCryptoWallet,
  Transaction as PrismaTransaction,
} from "@prisma/client";

export class CryptoWalletServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CryptoWalletCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cryptoWallet.count(args);
  }

  async cryptoWallets(
    args: Prisma.CryptoWalletFindManyArgs
  ): Promise<PrismaCryptoWallet[]> {
    return this.prisma.cryptoWallet.findMany(args);
  }
  async cryptoWallet(
    args: Prisma.CryptoWalletFindUniqueArgs
  ): Promise<PrismaCryptoWallet | null> {
    return this.prisma.cryptoWallet.findUnique(args);
  }
  async createCryptoWallet(
    args: Prisma.CryptoWalletCreateArgs
  ): Promise<PrismaCryptoWallet> {
    return this.prisma.cryptoWallet.create(args);
  }
  async updateCryptoWallet(
    args: Prisma.CryptoWalletUpdateArgs
  ): Promise<PrismaCryptoWallet> {
    return this.prisma.cryptoWallet.update(args);
  }
  async deleteCryptoWallet(
    args: Prisma.CryptoWalletDeleteArgs
  ): Promise<PrismaCryptoWallet> {
    return this.prisma.cryptoWallet.delete(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.cryptoWallet
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }
}
